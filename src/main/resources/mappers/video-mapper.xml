<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.e.shortform.model.mapper.VideoMapper">

    <resultMap id="videoResultMap" type="com.e.shortform.model.vo.VideoVo">
        <id property="id" column="ID"/>
        <result property="videoTitle" column="VIDEO_TITLE"/>
        <result property="videoDescription" column="VIDEO_DESCRIPTION"/>
        <result property="videoName" column="VIDEO_NAME"/>
        <result property="videoSrc" column="VIDEO_SRC"/>
        <result property="videoTag" column="VIDEO_TAG"/>
        <result property="videoViews" column="VIDEO_VIEWS"/>
        <result property="videoLoc" column="VIDEO_LOC"/>
        <result property="uploaderUserId" column="UPLOADER_USER_ID"/>
        <result property="videoWatchAvailability" column="VIDEO_WATCH_AVAILABILITY"/>
        <result property="commentAvailability" column="COMMENT_AVAILABILITY"/>
        <result property="uploadAt" column="UPLOAD_AT"/>
    </resultMap>

    <resultMap id="videoWithUserResultMap" type="com.e.shortform.model.dto.VideoWithUserDto">
        <id property="id" column="ID"/>
        <result property="videoTitle" column="VIDEO_TITLE"/>
        <result property="videoDescription" column="VIDEO_DESCRIPTION"/>
        <result property="videoName" column="VIDEO_NAME"/>
        <result property="videoSrc" column="VIDEO_SRC"/>
        <result property="videoTag" column="VIDEO_TAG"/>
        <result property="videoViews" column="VIDEO_VIEWS"/>
        <result property="videoLoc" column="VIDEO_LOC"/>
        <result property="uploaderUserId" column="UPLOADER_USER_ID"/>
        <result property="videoWatchAvailability" column="VIDEO_WATCH_AVAILABILITY"/>
        <result property="commentAvailability" column="COMMENT_AVAILABILITY"/>
        <result property="uploadAt" column="UPLOAD_AT"/>

        <association property="userVo" javaType="com.e.shortform.model.vo.UserVo" />
    </resultMap>

    <resultMap id="IndexPageAllVideosResultMap" type="com.e.shortform.model.dto.IndexPageAllVideosDto">
        <result property="videoId" column="VIDEO_ID"/>
        <result property="videoTitle" column="VIDEO_TITLE"/>
        <result property="videoDescription" column="VIDEO_DESCRIPTION"/>
        <result property="videoName" column="VIDEO_NAME"/>
        <result property="videoSrc" column="VIDEO_SRC"/>
        <result property="videoTag" column="VIDEO_TAG"/>
        <result property="videoViews" column="VIDEO_VIEWS"/>
        <result property="videoLoc" column="VIDEO_LOC"/>
        <result property="videoWatchAvailability" column="VIDEO_WATCH_AVAILABILITY"/>
        <result property="commentAvailability" column="COMMENT_AVAILABILITY"/>
        <result property="uploadAt" column="UPLOAD_AT"/>
        <result property="uploaderId" column="UPLOADER_ID"/>
        <result property="uploaderUsername" column="UPLOADER_USERNAME"/>
        <result property="uploaderMail" column="UPLOADER_MAIL"/>
        <result property="profileImg" column="PROFILE_IMG"/>
        <result property="profileImgSrc" column="PROFILE_IMG_SRC"/>
        <result property="bio" column="BIO"/>
        <result property="mention" column="MENTION"/>
        <result property="uploaderCreateAt" column="UPLOADER_CREATE_AT"/>
        <result property="likeCount" column="LIKE_COUNT"/>
    </resultMap>
    
    <resultMap id="videoWithUserFuckingResultMap" type="com.e.shortform.model.dto.VideoWithUserFuckingDto">
        <result property="videoId" column="VIDEO_ID"/>
        <result property="videoTitle" column="VIDEO_TITLE"/>
        <result property="videoDescription" column="VIDEO_DESCRIPTION"/>
        <result property="videoName" column="VIDEO_NAME"/>
        <result property="videoSrc" column="VIDEO_SRC"/>
        <result property="videoTag" column="VIDEO_TAG"/>
        <result property="videoViews" column="VIDEO_VIEWS"/>
        <result property="videoLoc" column="VIDEO_LOC"/>
        <result property="videoWatchAvailability" column="VIDEO_WATCH_AVAILABILITY"/>
        <result property="commentAvailability" column="COMMENT_AVAILABILITY"/>
        <result property="uploadAt" column="UPLOAD_AT"/>
        <result property="userId" column="USER_ID"/>
        <result property="username" column="USERNAME"/>
        <result property="mail" column="MAIL"/>
        <result property="profileImg" column="PROFILE_IMG"/>
        <result property="profileImgSrc" column="PROFILE_IMG_SRC"/>
        <result property="bio" column="BIO"/>
        <result property="mention" column="MENTION"/>
        <result property="createAt" column="CREATE_AT"/>
    </resultMap>
    
    <select id="selectByVideo" parameterType="String" resultMap="videoWithUserResultMap">
        SELECT v.ID AS VIDEO_ID, v.VIDEO_TITLE,
               v.VIDEO_DESCRIPTION, v.VIDEO_SRC,
               v.VIDEO_TAG, v.VIDEO_VIEWS,
               v.VIDEO_LOC, v.UPLOADER_USER_ID,
               v.VIDEO_WATCH_AVAILABILITY, v.COMMENT_AVAILABILITY,
               v.UPLOAD_AT, u.ID AS USER_ID,
               u.USERNAME, u.MAIL, u.PROFILE_IMG,
               u.PROFILE_IMG_SRC, u.BIO, u.MENTION,
               u.PROFILE_IMG_SRC,
               u.CREATE_AT
        FROM SHORTFORM_VIDEOS v
            JOIN SHORTFORM_USERS u ON v.UPLOADER_USER_ID = u.ID
        WHERE u.mention = #{mention}
            AND v.VIDEO_WATCH_AVAILABILITY = 'public'
    </select>

    <select id="selectIndexPageAllVideos" resultMap="IndexPageAllVideosResultMap">
        SELECT
            v.ID AS VIDEO_ID,
            v.VIDEO_TITLE,
            v.VIDEO_DESCRIPTION,
            v.VIDEO_NAME,
            v.VIDEO_SRC,
            v.VIDEO_TAG,
            v.VIDEO_VIEWS,
            v.VIDEO_LOC,
            v.VIDEO_WATCH_AVAILABILITY,
            v.COMMENT_AVAILABILITY,
            v.UPLOAD_AT,
            -- 업로더 정보
            u.ID AS UPLOADER_ID,
            u.USERNAME AS UPLOADER_USERNAME,
            u.MAIL AS UPLOADER_MAIL,
            u.PROFILE_IMG,
            u.PROFILE_IMG_SRC,
            u.BIO,
            u.MENTION,
            u.CREATE_AT AS UPLOADER_CREATE_AT,
            -- 통계 정보
            COALESCE(like_counts.LIKE_COUNT, 0) AS LIKE_COUNT
            FROM SHORTFORM_VIDEOS v
                 LEFT JOIN SHORTFORM_USERS u ON v.UPLOADER_USER_ID = u.ID
                 LEFT JOIN (
            SELECT
                LIKE_VIDEO_ID,
                COUNT(*) AS LIKE_COUNT
            FROM SHORTFORM_VIDEO_LIKES
            GROUP BY LIKE_VIDEO_ID
        ) like_counts ON v.ID = like_counts.LIKE_VIDEO_ID
        WHERE v.VIDEO_WATCH_AVAILABILITY = 'public'
        ORDER BY v.UPLOAD_AT DESC
    </select>

    <select id="searchLogic" resultMap="IndexPageAllVideosResultMap" parameterType="String">
        SELECT
            v.ID AS VIDEO_ID,
            v.VIDEO_TITLE,
            v.VIDEO_DESCRIPTION,
            v.VIDEO_NAME,
            v.VIDEO_SRC,
            v.VIDEO_TAG,
            v.VIDEO_VIEWS,
            v.VIDEO_LOC,
            v.VIDEO_WATCH_AVAILABILITY,
            v.COMMENT_AVAILABILITY,
            v.UPLOAD_AT,
            -- 업로더 정보
            u.ID AS UPLOADER_ID,
            u.USERNAME AS UPLOADER_USERNAME,
            u.MAIL AS UPLOADER_MAIL,
            u.PROFILE_IMG,
            u.PROFILE_IMG_SRC,
            u.BIO,
            u.MENTION,
            u.CREATE_AT AS UPLOADER_CREATE_AT,
            -- 통계 정보
            COALESCE(like_counts.LIKE_COUNT, 0) AS LIKE_COUNT
        FROM SHORTFORM_VIDEOS v
                 LEFT JOIN SHORTFORM_USERS u ON v.UPLOADER_USER_ID = u.ID
                 LEFT JOIN (
            SELECT
                LIKE_VIDEO_ID,
                COUNT(*) AS LIKE_COUNT
            FROM SHORTFORM_VIDEO_LIKES
            GROUP BY LIKE_VIDEO_ID
        ) like_counts ON v.ID = like_counts.LIKE_VIDEO_ID
        WHERE v.VIDEO_WATCH_AVAILABILITY = 'public'
          AND (LOWER(v.VIDEO_TITLE) LIKE '%' || LOWER(#{searchWordParam}) || '%'
          OR LOWER(v.VIDEO_TAG) LIKE '%' || LOWER(#{searchWordParam}) || '%'
          OR LOWER(v.VIDEO_DESCRIPTION) LIKE '%' || LOWER(#{searchWordParam}) || '%')
        ORDER BY v.UPLOAD_AT DESC
    </select>

    <select id="selectUserProfilePageAllVideos" parameterType="String" resultMap="IndexPageAllVideosResultMap">
        SELECT
            v.ID AS VIDEO_ID,
            v.VIDEO_TITLE,
            v.VIDEO_DESCRIPTION,
            v.VIDEO_NAME,
            v.VIDEO_SRC,
            v.VIDEO_TAG,
            v.VIDEO_VIEWS,
            v.VIDEO_LOC,
            v.VIDEO_WATCH_AVAILABILITY,
            v.COMMENT_AVAILABILITY,
            v.UPLOAD_AT,
            -- 업로더 정보
            u.ID AS UPLOADER_ID,
            u.USERNAME AS UPLOADER_USERNAME,
            u.MAIL AS UPLOADER_MAIL,
            u.PROFILE_IMG,
            u.PROFILE_IMG_SRC,
            u.BIO,
            u.MENTION,
            u.CREATE_AT AS UPLOADER_CREATE_AT,
            -- 통계 정보
            COALESCE(like_counts.LIKE_COUNT, 0) AS LIKE_COUNT
        FROM SHORTFORM_VIDEOS v
                 LEFT JOIN SHORTFORM_USERS u ON v.UPLOADER_USER_ID = u.ID
                 LEFT JOIN (
            SELECT
                LIKE_VIDEO_ID,
                COUNT(*) AS LIKE_COUNT
            FROM SHORTFORM_VIDEO_LIKES
            GROUP BY LIKE_VIDEO_ID
        ) like_counts ON v.ID = like_counts.LIKE_VIDEO_ID
        WHERE u.mention = #{mention}
        ORDER BY v.UPLOAD_AT DESC
    </select>

    <select id="selectRandomVideo" resultMap="videoResultMap">
        SELECT *
        FROM shortform_videos
        <where>
            <if test="excludeIds != null and excludeIds.size > 0">
                id NOT IN
                <foreach item="id" collection="excludeIds" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
        </where>
        ORDER BY DBMS_RANDOM.VALUE
        FETCH FIRST 1 ROWS ONLY
    </select>

    <select id="myLikeVideos" parameterType="Long" resultMap="IndexPageAllVideosResultMap">
        SELECT
            v.ID AS VIDEO_ID,
            v.VIDEO_TITLE,
            v.VIDEO_DESCRIPTION,
            v.VIDEO_NAME,
            v.VIDEO_SRC,
            v.VIDEO_TAG,
            v.VIDEO_VIEWS,
            v.VIDEO_LOC,
            v.VIDEO_WATCH_AVAILABILITY,
            v.COMMENT_AVAILABILITY,
            v.UPLOAD_AT,
            -- 업로더 정보
            u.ID AS UPLOADER_ID,
            u.USERNAME AS UPLOADER_USERNAME,
            u.MAIL AS UPLOADER_MAIL,
            u.PROFILE_IMG,
            u.PROFILE_IMG_SRC,
            u.BIO,
            u.MENTION,
            u.CREATE_AT AS UPLOADER_CREATE_AT,
            -- 통계 정보
            COALESCE(like_counts.LIKE_COUNT, 0) AS LIKE_COUNT
        FROM SHORTFORM_VIDEOS v
        JOIN SHORTFORM_VIDEO_LIKES my_like ON v.ID = my_like.LIKE_VIDEO_ID AND my_like.LIKER_USER_ID = #{id}   -- 특정 유저가 좋아요한 영상만
        LEFT JOIN SHORTFORM_USERS u ON v.UPLOADER_USER_ID = u.ID
        LEFT JOIN (
            SELECT
                LIKE_VIDEO_ID,
                COUNT(*) AS LIKE_COUNT
            FROM SHORTFORM_VIDEO_LIKES
            GROUP BY LIKE_VIDEO_ID
        ) like_counts ON v.ID = like_counts.LIKE_VIDEO_ID
        WHERE v.VIDEO_WATCH_AVAILABILITY = 'public'
        ORDER BY v.UPLOAD_AT DESC
    </select>

    <select id="selectExploreVideoListByTags" resultMap="IndexPageAllVideosResultMap" parameterType="String">
        SELECT
            v.ID AS VIDEO_ID,
            v.VIDEO_TITLE,
            v.VIDEO_DESCRIPTION,
            v.VIDEO_NAME,
            v.VIDEO_SRC,
            v.VIDEO_TAG,
            v.VIDEO_VIEWS,
            v.VIDEO_LOC,
            v.VIDEO_WATCH_AVAILABILITY,
            v.COMMENT_AVAILABILITY,
            v.UPLOAD_AT,
            -- 업로더 정보
            u.ID AS UPLOADER_ID,
            u.USERNAME AS UPLOADER_USERNAME,
            u.MAIL AS UPLOADER_MAIL,
            u.PROFILE_IMG,
            u.PROFILE_IMG_SRC,
            u.BIO,
            u.MENTION,
            u.CREATE_AT AS UPLOADER_CREATE_AT,
            -- 통계 정보
            COALESCE(like_counts.LIKE_COUNT, 0) AS LIKE_COUNT
        FROM SHORTFORM_VIDEOS v
                 LEFT JOIN SHORTFORM_USERS u ON v.UPLOADER_USER_ID = u.ID
                 LEFT JOIN (
            SELECT
                LIKE_VIDEO_ID,
                COUNT(*) AS LIKE_COUNT
            FROM SHORTFORM_VIDEO_LIKES
            GROUP BY LIKE_VIDEO_ID
        ) like_counts ON v.ID = like_counts.LIKE_VIDEO_ID
        WHERE VIDEO_WATCH_AVAILABILITY = 'public'
        AND VIDEO_TAG = #{hashtag}
        ORDER BY UPLOAD_AT DESC
    </select>

    <select id="selectExploreVideoListByTagsButVideoViewsDescFuck" resultMap="IndexPageAllVideosResultMap" parameterType="String">
        SELECT
            v.ID AS VIDEO_ID,
            v.VIDEO_TITLE,
            v.VIDEO_DESCRIPTION,
            v.VIDEO_NAME,
            v.VIDEO_SRC,
            v.VIDEO_TAG,
            v.VIDEO_VIEWS,
            v.VIDEO_LOC,
            v.VIDEO_WATCH_AVAILABILITY,
            v.COMMENT_AVAILABILITY,
            v.UPLOAD_AT,
            -- 업로더 정보
            u.ID AS UPLOADER_ID,
            u.USERNAME AS UPLOADER_USERNAME,
            u.MAIL AS UPLOADER_MAIL,
            u.PROFILE_IMG,
            u.PROFILE_IMG_SRC,
            u.BIO,
            u.MENTION,
            u.CREATE_AT AS UPLOADER_CREATE_AT,
            -- 통계 정보
            COALESCE(like_counts.LIKE_COUNT, 0) AS LIKE_COUNT
        FROM SHORTFORM_VIDEOS v
                 LEFT JOIN SHORTFORM_USERS u ON v.UPLOADER_USER_ID = u.ID
                 LEFT JOIN (
            SELECT
                LIKE_VIDEO_ID,
                COUNT(*) AS LIKE_COUNT
            FROM SHORTFORM_VIDEO_LIKES
            GROUP BY LIKE_VIDEO_ID
        ) like_counts ON v.ID = like_counts.LIKE_VIDEO_ID
        WHERE v.VIDEO_WATCH_AVAILABILITY = 'public'
        ORDER BY v.VIDEO_VIEWS DESC
    </select>

</mapper>